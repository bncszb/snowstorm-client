# coding: utf-8

"""
    Snowstorm

    SNOMED CT Terminology Server REST API

    The version of the OpenAPI document: 10.8.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from snowstorm_client.models.items_page_object_items import ItemsPageObjectItems
from typing import Optional, Set
from typing_extensions import Self

class ItemsPageObject(BaseModel):
    """
    ItemsPageObject
    """ # noqa: E501
    items: Optional[ItemsPageObjectItems] = None
    total: Optional[StrictInt] = None
    limit: Optional[StrictInt] = None
    offset: Optional[StrictInt] = None
    search_after: Optional[StrictStr] = Field(default=None, alias="searchAfter")
    search_after_array: Optional[ItemsPageObjectItems] = Field(default=None, alias="searchAfterArray")
    __properties: ClassVar[List[str]] = ["items", "total", "limit", "offset", "searchAfter", "searchAfterArray"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ItemsPageObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of items
        if self.items:
            _dict['items'] = self.items.to_dict()
        # override the default output from pydantic by calling `to_dict()` of search_after_array
        if self.search_after_array:
            _dict['searchAfterArray'] = self.search_after_array.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ItemsPageObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "items": ItemsPageObjectItems.from_dict(obj["items"]) if obj.get("items") is not None else None,
            "total": obj.get("total"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "searchAfter": obj.get("searchAfter"),
            "searchAfterArray": ItemsPageObjectItems.from_dict(obj["searchAfterArray"]) if obj.get("searchAfterArray") is not None else None
        })
        return _obj


